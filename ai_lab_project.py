# -*- coding: utf-8 -*-
"""AI_Lab_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KY4vLq0YtebhOf3ltW3DnXlREEv9h21I

Libraby import.
"""

import pandas as pd

"""Data Collection."""

id = pd.read_csv('/content/medical_insurance.csv')
id

"""Top 5 rows of the dataset."""

id.head(5)

"""Last 5 rows of the Dataset."""

id.tail(5)

"""Dataset shape."""

id.shape

print("Number of Rows", id.shape[0])
print("Number of Column", id.shape[1])

"""Getting information about Dataset."""

id.info()

"""Checking null values of Dataset."""

id.isnull().sum()

"""Overall statistics about Dataset."""

id.describe()

"""Convert string values to numerical values."""

id.head()

id['sex'].unique()

id['sex'] = id['sex'].map({'female':0, 'male':1})

id.head()

id['smoker'] = id['smoker'].map({'yes':1, 'no':0})

id.head()

id['region'].unique()

id['region'] = id['region'].map({'northeast':1, 'northwest':2, 'southeast':3, 'southwest':4})

id.head()

"""Feature matrix"""

id.columns

x = id.drop(['charges'], axis=1)
x

y = id['charges']
y

"""Train/Test split."""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=42)

x_train

"""Import models"""

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

"""Model Training."""

lr = LinearRegression()
lr.fit(x_train,y_train)
svm = SVR()
svm.fit(x_train, y_train)
rf = RandomForestRegressor()
rf.fit(x_train, y_train)
gb = GradientBoostingRegressor()
gb.fit(x_train, y_train)

"""Prediction."""

y_pred1 = lr.predict(x_test)
y_pred2 = svm.predict(x_test)
y_pred3 = rf.predict(x_test)
y_pred4 = gb.predict(x_test)

df1 = pd.DataFrame({'Actual': y_test, 'Lr': y_pred1, 'svm':y_pred2, 'rf':y_pred3, 'gb':y_pred4})

df1

"""Compare"""

import matplotlib.pyplot as plt

plt.subplot(221)
plt.plot(df1['Actual'].iloc[0:11], label='Actual')
plt.plot(df1['Lr'].iloc[0:11],label='Lr')
plt.legend()

plt.subplot(222)
plt.plot(df1['Actual'].iloc[0:11], label='Actual')
plt.plot(df1['svm'].iloc[0:11],label='svm')
plt.legend()

plt.subplot(223)
plt.plot(df1['Actual'].iloc[0:11], label='Actual')
plt.plot(df1['rf'].iloc[0:11],label='rf')
plt.legend()

plt.subplot(224)
plt.plot(df1['Actual'].iloc[0:11], label='Actual')
plt.plot(df1['gb'].iloc[0:11],label='gb')

plt.tight_layout()  

plt.legend()

"""Algorithm"""

from sklearn import metrics

# r^2 algorithm
score1 = metrics.r2_score(y_test,y_pred1)   #here higer is better(score3 is better)
score2 = metrics.r2_score(y_test,y_pred2)
score3 = metrics.r2_score(y_test,y_pred3)
score4 = metrics.r2_score(y_test,y_pred4)

print(score1, score2, score3, score4)

# mean_absolute_error algorithm
s1 = metrics.mean_absolute_error(y_test, y_pred1)   #here lower is better(s3 is better)
s2 = metrics.mean_absolute_error(y_test, y_pred2)
s3 = metrics.mean_absolute_error(y_test, y_pred3)
s4 = metrics.mean_absolute_error(y_test, y_pred4)

print(s1, s2, s3, s4)

"""Chargers """

cus_data = {'age': 40,
            'sex':1,
            'bmi':40.30,
            'smoker': 1,
            'region': 2,
            'children': 4}

df = pd.DataFrame(cus_data,index=[0])
df

new_pred = rf.predict(df)
print("The medical insurance cost of the new customer is: ",new_pred)